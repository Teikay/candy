// Code generated by protoc-gen-gogo.
// source: common.proto
// DO NOT EDIT!

/*
	Package meta is a generated protocol buffer package.

	It is generated from these files:
		common.proto
		gate.proto
		master.proto
		notice.proto
		store.proto

	It has these top-level messages:
		RequestHeader
		ResponseHeader
		PushID
		Message
		UserInfo
		UserList
		GroupInfo
		GroupList
		FriendList
		PushMessage
		GateFindUserRequest
		GateFindUserResponse
		GateFriendRequest
		GateFriendResponse
		GateCreateGroupRequest
		GateCreateGroupResponse
		GateRegisterRequest
		GateRegisterResponse
		GateUpdateUserInfoRequest
		GateUpdateUserInfoResponse
		GateUpdateUserPasswordRequest
		GateUpdateUserPasswordResponse
		GateGetUserInfoRequest
		GateGetUserInfoResponse
		GateHeartbeatRequest
		GateHeartbeatResponse
		GateUserLoginRequest
		GateUserLoginResponse
		GateUserLogoutRequest
		GateUserLogoutResponse
		GateUploadFileRequest
		GateUploadFileResponse
		GateCheckFileRequest
		GateCheckFileResponse
		GateDownloadFileRequest
		GateDownloadFileResponse
		GateLoadMessageRequest
		GateLoadMessageResponse
		GateLoadGroupListRequest
		GateLoadGroupListResponse
		GateLoadFriendListRequest
		GateLoadFriendListResponse
		GateSendMessageRequest
		GateSendMessageResponse
		GateGroupRequest
		GateGroupResponse
		GateGroupCreateRequest
		GateGroupCreateResponse
		GateGroupDeleteRequest
		GateGroupDeleteResponse
		GateUpdateSignatureRequest
		GateUpdateSignatureResponse
		NewIDRequest
		NewIDResponse
		SubscribeRequest
		PushRequest
		PushResponse
		StoreFindUserRequest
		StoreFindUserResponse
		StoreFriendRequest
		StoreFriendResponse
		StoreRegisterRequest
		StoreRegisterResponse
		StoreUpdateUserInfoRequest
		StoreUpdateUserInfoResponse
		StoreUpdateUserPasswordRequest
		StoreUpdateUserPasswordResponse
		StoreGetUserInfoRequest
		StoreGetUserInfoResponse
		StoreAuthRequest
		StoreAuthResponse
		StoreGroupCreateRequest
		StoreGroupCreateResponse
		StoreGroupRequest
		StoreGroupResponse
		StoreGroupDeleteRequest
		StoreGroupDeleteResponse
		StoreNewMessageRequest
		StoreNewMessageResponse
		StoreUploadFileRequest
		StoreUploadFileResponse
		StoreCheckFileRequest
		StoreCheckFileResponse
		StoreDownloadFileRequest
		StoreDownloadFileResponse
		StoreLoadMessageRequest
		StoreLoadMessageResponse
		StoreLoadGroupListRequest
		StoreLoadGroupListResponse
		StoreLoadFriendListRequest
		StoreLoadFriendListResponse
		StoreUpdateSignatureRequest
		StoreUpdateSignatureResponse
*/
package meta

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Relation int32

const (
	//  没关系, 已删除
	Relation_Del Relation = 0
	// 添加
	Relation_Add Relation = 1
	// 确认
	Relation_Confirm Relation = 2
	// 拒绝
	Relation_Refuse Relation = 4
)

var Relation_name = map[int32]string{
	0: "Del",
	1: "Add",
	2: "Confirm",
	4: "Refuse",
}
var Relation_value = map[string]int32{
	"Del":     0,
	"Add":     1,
	"Confirm": 2,
	"Refuse":  4,
}

func (x Relation) String() string {
	return proto.EnumName(Relation_name, int32(x))
}
func (Relation) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

// Event 事件（消息类型）
type Event int32

const (
	// 普通聊天的消息下推
	Event_None Event = 0
	// 群消息
	Event_Group Event = 1
	// 好友关系
	Event_Friend Event = 2
	// 上线
	Event_Online Event = 3
	// 下线
	Event_Offline Event = 4
	// 通知
	Event_Notice Event = 5
)

var Event_name = map[int32]string{
	0: "None",
	1: "Group",
	2: "Friend",
	3: "Online",
	4: "Offline",
	5: "Notice",
}
var Event_value = map[string]int32{
	"None":    0,
	"Group":   1,
	"Friend":  2,
	"Online":  3,
	"Offline": 4,
	"Notice":  5,
}

func (x Event) String() string {
	return proto.EnumName(Event_name, int32(x))
}
func (Event) EnumDescriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

// RequestHeader Gate向后端发请求时，带上这个头，方便记录具体操作信息.
type RequestHeader struct {
	User int64 `protobuf:"varint,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{0} }

type ResponseHeader struct {
	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{1} }

// PushID 用户的上一条消息ID,用户ID
type PushID struct {
	User   int64 `protobuf:"varint,1,opt,name=User,proto3" json:"User,omitempty"`
	Before int64 `protobuf:"varint,2,opt,name=Before,proto3" json:"Before,omitempty"`
}

func (m *PushID) Reset()                    { *m = PushID{} }
func (m *PushID) String() string            { return proto.CompactTextString(m) }
func (*PushID) ProtoMessage()               {}
func (*PushID) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{2} }

type Message struct {
	// ID 客户端发送过来时这个字段为0， gate收到后写入实际从master处获取到的消息ID
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Before 前一第消息的ID，用来确定是否有消息丢失
	Before int64 `protobuf:"varint,2,opt,name=Before,proto3" json:"Before,omitempty"`
	// Group 如果当前为群聊，设置为群组ID, 否则为0
	Group int64 `protobuf:"varint,3,opt,name=Group,proto3" json:"Group,omitempty"`
	// From 发消息的人的ID
	From int64 `protobuf:"varint,4,opt,name=From,proto3" json:"From,omitempty"`
	// To 如果当前为私聊，这个设置为收消息用户的ID, 否则为0
	To   int64  `protobuf:"varint,5,opt,name=To,proto3" json:"To,omitempty"`
	Body string `protobuf:"bytes,6,opt,name=Body,proto3" json:"Body,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{3} }

// UserInfo 用户信息
type UserInfo struct {
	ID        int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Password  string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	NickName  string `protobuf:"bytes,4,opt,name=NickName,proto3" json:"NickName,omitempty"`
	Avatar    string `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Signature string `protobuf:"bytes,6,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *UserInfo) Reset()                    { *m = UserInfo{} }
func (m *UserInfo) String() string            { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()               {}
func (*UserInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{4} }

// UserList 用户列表
type UserList struct {
	Users []*UserInfo `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{5} }

func (m *UserList) GetUsers() []*UserInfo {
	if m != nil {
		return m.Users
	}
	return nil
}

// GroupInfo 群信息，目前只有名字，公告，头像
type GroupInfo struct {
	Active bool   `protobuf:"varint,1,opt,name=Active,proto3" json:"Active,omitempty"`
	ID     int64  `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Owner  int64  `protobuf:"varint,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Avatar string `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Notice string `protobuf:"bytes,6,opt,name=Notice,proto3" json:"Notice,omitempty"`
	// Admins 管理员
	Admins []int64 `protobuf:"varint,7,rep,packed,name=Admins" json:"Admins,omitempty"`
	// Member 成员
	Member []int64 `protobuf:"varint,8,rep,packed,name=Member" json:"Member,omitempty"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{6} }

// GroupList 群组列表
type GroupList struct {
	Groups []*GroupInfo `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *GroupList) Reset()                    { *m = GroupList{} }
func (m *GroupList) String() string            { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()               {}
func (*GroupList) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{7} }

func (m *GroupList) GetGroups() []*GroupInfo {
	if m != nil {
		return m.Groups
	}
	return nil
}

// FriendList 好友列表
type FriendList struct {
	Users []int64 `protobuf:"varint,1,rep,packed,name=Users" json:"Users,omitempty"`
}

func (m *FriendList) Reset()                    { *m = FriendList{} }
func (m *FriendList) String() string            { return proto.CompactTextString(m) }
func (*FriendList) ProtoMessage()               {}
func (*FriendList) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{8} }

// 下推的消息，有系统消息(加群，加好友，上线通知啥的)，正常聊天消息
type PushMessage struct {
	// 消息类型，如好友，群，通知， 上线，下线之类的操作
	Event Event `protobuf:"varint,1,opt,name=Event,proto3,enum=candy.meta.Event" json:"Event,omitempty"`
	// 关系操作，加好友，删除好友，T出群，加入群
	Operate Relation `protobuf:"varint,2,opt,name=Operate,proto3,enum=candy.meta.Relation" json:"Operate,omitempty"`
	// 具体消息
	Msg Message `protobuf:"bytes,3,opt,name=Msg" json:"Msg"`
	// 这消息到底是发给用户的，还是发给群的
	ToUser bool `protobuf:"varint,4,opt,name=ToUser,proto3" json:"ToUser,omitempty"`
}

func (m *PushMessage) Reset()                    { *m = PushMessage{} }
func (m *PushMessage) String() string            { return proto.CompactTextString(m) }
func (*PushMessage) ProtoMessage()               {}
func (*PushMessage) Descriptor() ([]byte, []int) { return fileDescriptorCommon, []int{9} }

func (m *PushMessage) GetMsg() Message {
	if m != nil {
		return m.Msg
	}
	return Message{}
}

func init() {
	proto.RegisterType((*RequestHeader)(nil), "candy.meta.RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "candy.meta.ResponseHeader")
	proto.RegisterType((*PushID)(nil), "candy.meta.PushID")
	proto.RegisterType((*Message)(nil), "candy.meta.Message")
	proto.RegisterType((*UserInfo)(nil), "candy.meta.UserInfo")
	proto.RegisterType((*UserList)(nil), "candy.meta.UserList")
	proto.RegisterType((*GroupInfo)(nil), "candy.meta.GroupInfo")
	proto.RegisterType((*GroupList)(nil), "candy.meta.GroupList")
	proto.RegisterType((*FriendList)(nil), "candy.meta.FriendList")
	proto.RegisterType((*PushMessage)(nil), "candy.meta.PushMessage")
	proto.RegisterEnum("candy.meta.Relation", Relation_name, Relation_value)
	proto.RegisterEnum("candy.meta.Event", Event_name, Event_value)
}
func (m *RequestHeader) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RequestHeader) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCommon(data, i, uint64(m.User))
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResponseHeader) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCommon(data, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Msg)))
		i += copy(data[i:], m.Msg)
	}
	return i, nil
}

func (m *PushID) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PushID) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCommon(data, i, uint64(m.User))
	}
	if m.Before != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCommon(data, i, uint64(m.Before))
	}
	return i, nil
}

func (m *Message) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Message) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCommon(data, i, uint64(m.ID))
	}
	if m.Before != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCommon(data, i, uint64(m.Before))
	}
	if m.Group != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCommon(data, i, uint64(m.Group))
	}
	if m.From != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintCommon(data, i, uint64(m.From))
	}
	if m.To != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintCommon(data, i, uint64(m.To))
	}
	if len(m.Body) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Body)))
		i += copy(data[i:], m.Body)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UserInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCommon(data, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Password) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	if len(m.NickName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.NickName)))
		i += copy(data[i:], m.NickName)
	}
	if len(m.Avatar) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Avatar)))
		i += copy(data[i:], m.Avatar)
	}
	if len(m.Signature) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Signature)))
		i += copy(data[i:], m.Signature)
	}
	return i, nil
}

func (m *UserList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UserList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			data[i] = 0xa
			i++
			i = encodeVarintCommon(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GroupInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GroupInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Active {
		data[i] = 0x8
		i++
		if m.Active {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.ID != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCommon(data, i, uint64(m.ID))
	}
	if m.Owner != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintCommon(data, i, uint64(m.Owner))
	}
	if len(m.Name) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Avatar) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Avatar)))
		i += copy(data[i:], m.Avatar)
	}
	if len(m.Notice) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintCommon(data, i, uint64(len(m.Notice)))
		i += copy(data[i:], m.Notice)
	}
	if len(m.Admins) > 0 {
		data2 := make([]byte, len(m.Admins)*10)
		var j1 int
		for _, num1 := range m.Admins {
			num := uint64(num1)
			for num >= 1<<7 {
				data2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			data2[j1] = uint8(num)
			j1++
		}
		data[i] = 0x3a
		i++
		i = encodeVarintCommon(data, i, uint64(j1))
		i += copy(data[i:], data2[:j1])
	}
	if len(m.Member) > 0 {
		data4 := make([]byte, len(m.Member)*10)
		var j3 int
		for _, num1 := range m.Member {
			num := uint64(num1)
			for num >= 1<<7 {
				data4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			data4[j3] = uint8(num)
			j3++
		}
		data[i] = 0x42
		i++
		i = encodeVarintCommon(data, i, uint64(j3))
		i += copy(data[i:], data4[:j3])
	}
	return i, nil
}

func (m *GroupList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GroupList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			data[i] = 0xa
			i++
			i = encodeVarintCommon(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendList) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *FriendList) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		data6 := make([]byte, len(m.Users)*10)
		var j5 int
		for _, num1 := range m.Users {
			num := uint64(num1)
			for num >= 1<<7 {
				data6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			data6[j5] = uint8(num)
			j5++
		}
		data[i] = 0xa
		i++
		i = encodeVarintCommon(data, i, uint64(j5))
		i += copy(data[i:], data6[:j5])
	}
	return i, nil
}

func (m *PushMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PushMessage) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintCommon(data, i, uint64(m.Event))
	}
	if m.Operate != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintCommon(data, i, uint64(m.Operate))
	}
	data[i] = 0x1a
	i++
	i = encodeVarintCommon(data, i, uint64(m.Msg.Size()))
	n7, err := m.Msg.MarshalTo(data[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.ToUser {
		data[i] = 0x20
		i++
		if m.ToUser {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Common(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Common(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCommon(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.User != 0 {
		n += 1 + sovCommon(uint64(m.User))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovCommon(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *PushID) Size() (n int) {
	var l int
	_ = l
	if m.User != 0 {
		n += 1 + sovCommon(uint64(m.User))
	}
	if m.Before != 0 {
		n += 1 + sovCommon(uint64(m.Before))
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCommon(uint64(m.ID))
	}
	if m.Before != 0 {
		n += 1 + sovCommon(uint64(m.Before))
	}
	if m.Group != 0 {
		n += 1 + sovCommon(uint64(m.Group))
	}
	if m.From != 0 {
		n += 1 + sovCommon(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovCommon(uint64(m.To))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCommon(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *UserList) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *GroupInfo) Size() (n int) {
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	if m.ID != 0 {
		n += 1 + sovCommon(uint64(m.ID))
	}
	if m.Owner != 0 {
		n += 1 + sovCommon(uint64(m.Owner))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Admins) > 0 {
		l = 0
		for _, e := range m.Admins {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	if len(m.Member) > 0 {
		l = 0
		for _, e := range m.Member {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	return n
}

func (m *GroupList) Size() (n int) {
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *FriendList) Size() (n int) {
	var l int
	_ = l
	if len(m.Users) > 0 {
		l = 0
		for _, e := range m.Users {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	return n
}

func (m *PushMessage) Size() (n int) {
	var l int
	_ = l
	if m.Event != 0 {
		n += 1 + sovCommon(uint64(m.Event))
	}
	if m.Operate != 0 {
		n += 1 + sovCommon(uint64(m.Operate))
	}
	l = m.Msg.Size()
	n += 1 + l + sovCommon(uint64(l))
	if m.ToUser {
		n += 2
	}
	return n
}

func sovCommon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestHeader) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			m.User = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.User |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushID) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			m.User = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.User |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			m.Before = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Before |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			m.Before = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Before |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Group |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.From |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.To |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &UserInfo{})
			if err := m.Users[len(m.Users)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			m.Owner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Owner |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Admins = append(m.Admins, v)
				}
			} else if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Admins = append(m.Admins, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
		case 8:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Member = append(m.Member, v)
				}
			} else if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Member = append(m.Member, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &GroupInfo{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendList) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := data[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Users = append(m.Users, v)
				}
			} else if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Users = append(m.Users, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushMessage) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Event |= (Event(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			m.Operate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Operate |= (Relation(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Msg.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToUser = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("common.proto", fileDescriptorCommon) }

var fileDescriptorCommon = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0xe3, 0x47, 0x92, 0x1b, 0x88, 0xcc, 0x10, 0x2a, 0xab, 0x42, 0x21, 0x32, 0x0b, 0xaa,
	0x22, 0x82, 0x54, 0xa0, 0x0b, 0x76, 0x4d, 0x43, 0x21, 0x12, 0x49, 0xaa, 0xa1, 0x48, 0x88, 0x9d,
	0x1b, 0xdf, 0x04, 0x8b, 0x7a, 0x26, 0xcc, 0x38, 0xad, 0xba, 0xe2, 0x17, 0xf8, 0x00, 0xfe, 0x80,
	0x6f, 0x60, 0xdf, 0x25, 0x5f, 0x80, 0x50, 0xf9, 0x11, 0x34, 0x0f, 0xa7, 0x41, 0xd0, 0xdd, 0x3d,
	0x33, 0xe7, 0x3e, 0xce, 0xb9, 0x1e, 0xc3, 0x8d, 0x29, 0xcf, 0x73, 0xce, 0x7a, 0x0b, 0xc1, 0x0b,
	0x4e, 0x60, 0x9a, 0xb0, 0xf4, 0xbc, 0x97, 0x63, 0x91, 0x6c, 0xb6, 0xe7, 0x7c, 0xce, 0xf5, 0xf1,
	0x63, 0x15, 0x19, 0x46, 0x7c, 0x1f, 0x6e, 0x52, 0xfc, 0xb4, 0x44, 0x59, 0xbc, 0xc2, 0x24, 0x45,
	0x41, 0x08, 0x78, 0x6f, 0x25, 0x8a, 0xc8, 0xe9, 0x3a, 0x5b, 0x2e, 0xd5, 0x71, 0xbc, 0x0b, 0x2d,
	0x8a, 0x72, 0xc1, 0x99, 0xc4, 0x2b, 0xd6, 0x3e, 0x4f, 0x51, 0xb3, 0x7c, 0xaa, 0x63, 0x12, 0x82,
	0x3b, 0x92, 0xf3, 0xa8, 0xda, 0x75, 0xb6, 0x1a, 0x54, 0x85, 0xf1, 0x53, 0x08, 0x0e, 0x97, 0xf2,
	0xc3, 0x70, 0xf0, 0xbf, 0xaa, 0x64, 0x03, 0x82, 0x3e, 0xce, 0xb8, 0x40, 0x9d, 0xe2, 0x52, 0x8b,
	0xe2, 0xcf, 0x50, 0x1b, 0xa1, 0x94, 0xc9, 0x1c, 0x49, 0x0b, 0xaa, 0xc3, 0x81, 0x4d, 0xaa, 0x0e,
	0x07, 0xd7, 0xa5, 0x90, 0x36, 0xf8, 0x2f, 0x05, 0x5f, 0x2e, 0x22, 0x57, 0x1f, 0x1b, 0xa0, 0x9a,
	0x1e, 0x08, 0x9e, 0x47, 0x9e, 0x69, 0xaa, 0x62, 0x55, 0xf1, 0x88, 0x47, 0xbe, 0xa9, 0x78, 0xc4,
	0x15, 0xa7, 0xcf, 0xd3, 0xf3, 0x28, 0xd0, 0x53, 0xeb, 0x38, 0xfe, 0xea, 0x40, 0x5d, 0x4d, 0x38,
	0x64, 0x33, 0xfe, 0xcf, 0x08, 0x04, 0xbc, 0x71, 0x92, 0xa3, 0x95, 0xa9, 0x63, 0xb2, 0x09, 0xf5,
	0xc3, 0x44, 0xca, 0x33, 0x2e, 0x52, 0x3d, 0x41, 0x83, 0xae, 0xb0, 0xba, 0x1b, 0x67, 0xd3, 0x8f,
	0x3a, 0xc7, 0x33, 0x77, 0x25, 0x56, 0x72, 0xf6, 0x4e, 0x93, 0x22, 0x11, 0x7a, 0xa0, 0x06, 0xb5,
	0x88, 0xdc, 0x85, 0xc6, 0x9b, 0x6c, 0xce, 0x92, 0x62, 0x29, 0xd0, 0x4e, 0x76, 0x75, 0x10, 0xef,
	0x9a, 0xe9, 0x5e, 0x67, 0xb2, 0x20, 0xdb, 0xe0, 0xab, 0x58, 0x46, 0x4e, 0xd7, 0xdd, 0x6a, 0xee,
	0xb4, 0x7b, 0x57, 0x0b, 0xef, 0x95, 0x12, 0xa8, 0xa1, 0xc4, 0xdf, 0x1d, 0x68, 0x68, 0x63, 0xb4,
	0x2e, 0xd5, 0x7b, 0x5a, 0x64, 0xa7, 0x66, 0x87, 0x75, 0x6a, 0x91, 0xd5, 0x5b, 0x5d, 0xe9, 0x6d,
	0x83, 0x3f, 0x39, 0x63, 0x28, 0x4a, 0x6b, 0x35, 0x58, 0xb9, 0xe0, 0xad, 0xb9, 0x70, 0x9d, 0x9a,
	0x0d, 0x08, 0xc6, 0xbc, 0xc8, 0xa6, 0xa5, 0x14, 0x8b, 0x34, 0x3f, 0xcd, 0x33, 0x26, 0xa3, 0x5a,
	0xd7, 0x55, 0xcb, 0x34, 0x48, 0x9d, 0x8f, 0x30, 0x3f, 0x46, 0x11, 0xd5, 0xcd, 0xb9, 0x41, 0xf1,
	0x73, 0x3b, 0xbe, 0x16, 0xfe, 0x08, 0x02, 0x0d, 0x4a, 0xe5, 0x77, 0xd6, 0x95, 0xaf, 0x54, 0x52,
	0x4b, 0x8a, 0x63, 0x80, 0x03, 0x91, 0x21, 0x4b, 0x75, 0x72, 0x7b, 0xdd, 0x35, 0xb7, 0xf4, 0xe7,
	0x9b, 0x03, 0x4d, 0xf5, 0xb9, 0x96, 0x1f, 0xdf, 0x03, 0xf0, 0x5f, 0x9c, 0x22, 0x2b, 0xb4, 0x41,
	0xad, 0x9d, 0x5b, 0xeb, 0x1d, 0xf4, 0x05, 0x35, 0xf7, 0xa4, 0x07, 0xb5, 0xc9, 0x02, 0x45, 0x52,
	0x98, 0xaf, 0xa2, 0xf5, 0xf7, 0x1a, 0x28, 0x9e, 0x24, 0x45, 0xc6, 0x19, 0x2d, 0x49, 0xe4, 0xa1,
	0x79, 0x28, 0xca, 0xd0, 0xe6, 0xce, 0xed, 0x75, 0xae, 0x6d, 0xdd, 0xf7, 0x2e, 0x7e, 0xde, 0xab,
	0xe8, 0x37, 0xa4, 0xdc, 0x38, 0xe2, 0xfa, 0xed, 0x78, 0x66, 0x4f, 0x06, 0x6d, 0x3f, 0x83, 0x7a,
	0x59, 0x99, 0xd4, 0xc0, 0x1d, 0xe0, 0x49, 0x58, 0x51, 0xc1, 0x5e, 0x9a, 0x86, 0x0e, 0x69, 0x42,
	0x6d, 0x9f, 0xb3, 0x59, 0x26, 0xf2, 0xb0, 0x4a, 0x00, 0x02, 0x8a, 0xb3, 0xa5, 0xc4, 0xd0, 0xdb,
	0x1e, 0x59, 0x51, 0xa4, 0x0e, 0xde, 0x98, 0x33, 0x0c, 0x2b, 0xa4, 0x61, 0x1f, 0x4f, 0xe8, 0x28,
	0xa6, 0xb1, 0xc9, 0x64, 0x4d, 0xd8, 0x49, 0xc6, 0x30, 0x74, 0x55, 0xb9, 0xc9, 0x6c, 0xa6, 0x81,
	0xa7, 0x2e, 0xcc, 0x06, 0x43, 0xbf, 0xbf, 0x71, 0x71, 0xd9, 0x71, 0x7e, 0x5c, 0x76, 0x9c, 0x5f,
	0x97, 0x1d, 0xe7, 0xcb, 0xef, 0x4e, 0xe5, 0xbd, 0xa7, 0x84, 0xbc, 0xab, 0x1c, 0x07, 0xfa, 0xff,
	0xf2, 0xe4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x49, 0xe3, 0x7d, 0x91, 0x04, 0x00, 0x00,
}
